<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>JPtacek.com | Musings on code and who knows what 3ls3</title>
    <link href="https://www.jptacek.com/feed/" rel="self"/>
    <link href="https://www.jptacek.com"/>
    <updated>2016-05-03T15:41:27.007Z</updated>
    <id>https://www.jptacek.com/</id>
    <author>
        <name>John Ptacek</name>
        <email>jptacek@gmail.com</email>
    </author>

    
    <entry>
        <title>The Death of Moore's Law and the Game of Go</title>
        <link href="https://www.jptacek.com/2016/05/DeathOfMooresLawAndTheGameOfGo/"/>
        <updated>2016-05-03T05:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2016-05-03,/2016/05/DeathOfMooresLawAndTheGameOfGo/</id>
        <content type="html"><![CDATA[<p>For the last 50 years or so, the land of computers has been ruled by Moore’s Law, but that time is coming to an end. </p>
<p>TLDR; Moore’s Law is dying, but instead of going smaller with transistors for computing power, we will go large with scale, AI and quantum computer for computing power</p>
<p>For those of you unfamiliar with Moore’s Law, it was an observation made in the 1960s by Gordon Moore, that the number of transistors in an integrated circuit would double approximately every two years. Moore, who went on to form Intel, was quite prescient in this declaration. </p>
<p>Intel released its first chip in 1971 and it contained approximately 2300 transistors. Fast forward to today, where a quad core Skylake chip from Intel has approximately 1.75 billion transistors. Obviously, the last 45 years has seen amazing gains in the engineering and the manufacturing processes involved in making chips for computing devices, so much so, the supercomputers of 30 years ago are the $500 smartphones we carry in our pockets.</p>
<p><img src="https://www.jptacek.com/2016/05/DeathOfMooresLawAndTheGameOfGo/mooresLaw.svg?raw=true" alt="Moore&apos;s Law"> source: <a href="https://en.wikipedia.org/wiki/Moore%27s_law#/media/File:Transistor_Count_and_Moore%27s_Law_-_2011.svg">Wikipedia</a></p>
<p>This growth in chip size has transformed our world. Between the rise of computers, then smartphones and high speed data networks, the world is a different place. Communication costs have plummeted. We are more connected globally than ever before. Opportunities have expanded globally for millions and millions of people.  The economic and social benefits of this have been tremendous. It has been breathtaking in the scope of impact it has had on society; from the inane tweets of Kardashians to the Arab spring.</p>
<p>So Moore’s Law has been a huge success, however, it is more of an observation than a physical law. For example, Newton’s Law of Gravity is (almost always) the law of the Universe with F = ma. Moore’s Law though is not that, and its time is coming to an end. The amazing advances in the reduction of chip size will soon be a thing of the past. Without Moore’s Law, which helped create the economic engine of the Information age, does that mean GDP growth will be disappearing? Of course not, at least in terms of computing power. Instead of Moore’s law being about doubling of transistors on a chip, we now think of computation growth coming from other places. First off, to the ancient game of Go!</p>
<p>The game of <a href="https://en.wikipedia.org/wiki/Go_%28game%29">Go</a> is a 2500-year-old game from China that is played with black and white stones on a 19x19 grid. The game has relatively simple rules, but the size of the board makes it an exceedingly complex game. While games like Chess are complex, the pieces have limited moves and varying strength, so it is somewhat easier to determine the relative value of certain moves and use brute force computation to analyze all the possible outcomes on the, relatively smaller, 8x8 chess board. In Go, the moves are much more nuanced, and players take years and years of playing, to recognize patterns to be a successful player. In computer terms, chess is a solvable problem by applying computation as demonstrated by <a href="https://en.wikipedia.org/wiki/Deep_Blue_%28chess_computer%29">Deep Blue</a> back in the 90s when world Chess champion Gary Kasparov was (nerd) famously beat. </p>
<p><img src="https://www.jptacek.com/2016/05/DeathOfMooresLawAndTheGameOfGo/GoGame.jpg" alt="Go Game"></p>
<p>The approach used by Deep Blue though, wouldn’t work with Go, so it has always been considered an artificial intelligence problem, more than a CPU intensive problem. The ability to beat the Go equivalent of a grandmaster was thought to be at least a decade away. So this March (2016), much of the computer world, was amazed then to see Google’s <a href="https://deepmind.com/alpha-go">AlphaGo</a> (developed by Google <a href="https://deepmind.com/">DeepMind</a>) beat a Korean champion Lee Se-Dol this March (2016) in a 5 game battle. You can read about the matches at <a href="http://www.theverge.com/google-deepmind">The Verge</a>. </p>
<p>We learn two things from this… First, we can replace the previous decades of massive growth of transistors on a chip with the massive growth of computing resources at scale. Google’s DeepMind program utilized a cluster of computers to derive massive computational resources to solving a very difficult problem. As connectivity becomes more pervasive and network speed grow, these computing resources can be used to solve complex problems, without needing more CPU resources on our devices.</p>
<p>The second thing we learn from Google’s DeepMind victory against a Go champion is that there are other solutions to problems. While computing power could win a game of chess, it would never win at something like Go. Instead of the brute force approach that was so effective for Deep Blue, different solutions were needed. Many years of research came to fruition, including pattern recognition, deep learning and neural networks that were bundled into DeepMind. The AlphaGo program was taught to learn by “watching” old Go games from champions, and then constantly playing itself. The more it learned, the better it became. So much so, that during the actual tournament, commentators were shocked by some of the moves the AI made, and there was one move the human player was so taken aback by, he took a very long break. This kind of growth in alternative approaches to problem solving can again, provide greater computational power while not increasing transistor size.</p>
<p>Last, another future path to computation growth is quantum computing. Quantum computing requires a bit of a deeper dive (future blog post!), but suffice to say, the world of qbits and supposition principle provides orders and orders of magnitude increases in speed for some computational cases.</p>
<p>So…. Moore’s law is going away. We are reaching the literal physical limitations of how much closer we can put transistors on a chip. We are also moving to a world where lower power usage, which equates to less chip performance is much more preferred than previous decades. This all means different computing platforms will help a variations of Moore’s law continue, where computing power continues to increase, but it will be distributed into massive scale cloud infrastructure with novel approaches like neural networks and quantum computing coupled with speedy networks to make sure today’s super computers are in our pockets in 30 years.</p>
]]></content>
        <foo1><![CDATA[https://www.jptacek.com/2016/05/DeathOfMooresLawAndTheGameOfGo/]]></foo1>
            </entry>
    
    <entry>
        <title>Build 2016 Recap</title>
        <link href="https://www.jptacek.com/2016/04/Build2016Recap/"/>
        <updated>2016-04-06T05:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2016-04-06,/2016/04/Build2016Recap/</id>
        <content type="html"><![CDATA[<p>Microsoft’s recent developer conference, Build, finished up last week in San Francisco. Every year, Skyline sends a team of people to Build to understand Microsoft’s direction for our customers in the coming year  </p>
<p><img src="https://www.jptacek.com/2016/04/Build2016Recap/build1.jpg" alt="Build Banner"></p>
<p>Here are some of the key takeaways</p>
<p><strong>Xamarin</strong> – Microsoft recently closed their purchase of Xamarin, a toolset for developing cross platform mobile applications across Windows, iOS and Android. The big news out of Build was that Microsoft was making the Xamarin tooling free for everyone. While free is great news, Microsoft also announced they were open sourcing Xamarin. This should encourage organizations who were hesitant about Xamarin because of cost constraints to re-evaluate!</p>
<p><strong>BASH</strong> – Microsoft is bringing the Bash Shell to Windows! This may not mean anything to a lot of folks, but to developers, it is a huge deal. The Bash Shell is the most popular Unix shell, which is the command line interface (CLI) developers use. With a lot of Open Source tooling, it was always a source of friction between how development would work on Windows vs OS X or Linux. With Microsoft teaming up with Canonical, the maker of the popular Ubuntu Linux distribution, to bring Bash to Windows this should make developing applications for multiple platforms on Windows much easier!</p>
<p><strong>Bots</strong> – One of the more interesting reveals at Build this year was the release of the Microsoft Bot platform 
(<a href="https://dev.botframework.com/">https://dev.botframework.com/</a>). Bots are really mini pieces of functionality done in an interactive environment. For example, you could create a bot to show movie times. Another bot may be able to show you bus times. The impetus for this is really two fold. First, Microsoft feels people are at peak app, which is the idea that users have so many apps, they aren’t downloading more. Does someone really need to download an app to get a bus schedule they need once or twice a year? Microsoft thinks Bots answer that question.</p>
<p><strong>Cognitive Services</strong> – The second piece of the Bot strategy is Microsoft’s introduction of Cognitive Services (<a href="https://www.microsoft.com/cognitive-services">https://www.microsoft.com/cognitive-services</a>). This is a way of bringing intelligence into applications and is the evolvement of Project Oxford via an API. Microsoft has several of these “intelligence” APIs for things such as natural language query, image recognition, etc. One example of this is an application and website that Microsoft created where you can upload a picture to the Azure cloud of a person, and have it use the AI backend Microsoft has created to tell you how old the person is (<a href="https://how-old.net/">https://how-old.net/</a>).</p>
<p><strong>Conversational UX</strong> – By combing Microsoft’s Bot strategy and cognitive services together, they are ultimately trying to create a new User Experience, via conversations. This is where you can interact with a service via your voice or typing and have it perform actions. An example shown during the keynote was ordering a pizza from Dominos via a bot you were interacting with on Skype. </p>
<p><strong>HoloLens</strong> – Microsoft officially celebrated their release of HoloLens, their impressive augmented reality headset during the first day keynote, in an oddly stilted demonstration of HoloLens. It will be a bit before we are all playing Minecraft in our living rooms via HoloLens, but the technology is shipping to devs now and it is impressive. Most of the initial applications appear to be focused on education and the enterprise, especially engineering and manufacturing scenarios. </p>
<p>One of the impressive demos of HoloLens to attendees was a NASA/Microsoft created demo of going to the surface of Mars. Using photos from Nasa rovers, a 3D environment was created that enabled attendees to look and walk around the surface of Mars. Very cool demonstration of the potential!</p>
<p><strong>New Windows</strong> – Microsoft discussed bits and pieces of the upcoming release of Windows this summer, Windows Anniversary edition, which was previously codenamed Redstone. While there wasn’t a ton of information about Redstone, the Start Menu is being evolved, Live Tiles are getting richer and better notifications are coming to the platform. Further, the Edge browser is getting new features including the ability to have extensions (yeah!).</p>
<p><img src="https://www.jptacek.com/2016/04/Build2016Recap/build2.jpg" alt="Satya Nadella Keynote"></p>
<p>Build this year was an interesting one. Microsoft, after many years of trying to get folks behind their mobile plans essentially decided to jump past mobile and envision what is after mobile. Some of their ideas include augmented reality with HoloLens as well as new ways for user to interact and do their job, via conversation with intelligent agents. When you look at the inclusion of the Bash shell and giving all developers the ability to create mobile apps for free for all platforms using C#, and you know you are dealing with a different Microsoft, a more open and diverse computing company. This is exciting to see for developers and organizations and opens both to many new and interesting opportunities.</p>
<p>This post originally appeared at <a href="http://www.skylinetechnologies.com/Insights/Skyline-Blog/April_2016/Build_2016_Recap">Skyline Technologies</a>.</p>
]]></content>
        <foo1><![CDATA[https://www.jptacek.com/2016/04/Build2016Recap/]]></foo1>
            </entry>
    
    <entry>
        <title>Google I/O and the Death of the Web</title>
        <link href="https://www.jptacek.com/2015/06/GoogleIOAndDeathOfWeb/"/>
        <updated>2015-06-01T05:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2015-06-01,/2015/06/GoogleIOAndDeathOfWeb/</id>
        <content type="html"><![CDATA[<p>Google recently wrapped up their annual developer conference, 
<a href="https://events.google.com/io2015/#">Google I/O</a>, and I was struck by how very 
little was said about the Web during the keynote. While the death of the web may be 
a bit of click bait title, the 2015 Google I/O conference highlights it is an app world now 
and a connected world is on the way. 
We can
start to envision a future where we use a Web Browser as much as we use a VHS player. </p>
<p><img src="https://www.jptacek.com/2015/06/GoogleIOAndDeathOfWeb/io15-color.png" alt="Google I/O Logo"></p>
<p>To provide some background, Google I/O is a developer conference where Google reaches out to get 
developers excited
about their platform. Microsoft has their <a href="http://www.buildwindows.com/">Build</a> 
conference  and Apple has <a href="http://www.buildwindows.com/">WWDC</a> and they all do the same
thing; encourage developers to create great things on their respective platforms and show their vision of
the future and why developers should invest their time in adopting this vision. </p>
<p>The Google we know today, with its $350 Billion (USD) market capitalization and $48 
billion (USD) in cash reserves, is a result of building great tools for the Web 
such as <a href="https://www.google.com">search</a> and <a href="https://www.gmail.com">Gmail</a>. 
Google also has many great web technologies that developers use every day.<br><a href="https://angularjs.org/">AngularJS</a> is an exceedingly popular JavaScript framework.
<a href="https://cloud.google.com/appengine/docs">Google App Engine</a> is a popular cloud 
Platform As A Service (PAAS) service offering. <a href="https://www.google.com/analytics">Google Analytics</a> 
is embedded on nearly every 
web page on the Internet. <a href="http://maps.google.com/">Google Maps</a> are displayed 
on millions of web pages across the 
Internet. Google Ad Sense is responsible for the vast majority of Google&#39;s 
$48 billion cash hoard. Even tools like Google Chart are used every day by millions.</p>
<p>So how many of these apps or services were mentioned during Google&#39;s I/O keynote. Nary 
a one, despite the wide adoption and support these tools/apps have. 
The biggest web technology Google focused on during their keynote was 
<a href="https://www.polymer-project.org/1.0/">Polymer</a>, a web toolkit based on their
Material design standard that was released at the conference. Their was also the release of 
<a href="https://photos.google.com">Google Photos</a>, but that is
more about capturing the images you take on your phone than the next great Web thing.
Google used its developer conference to discuss very little of its web technologies.</p>
<p>What does this all mean? Google&#39;s mantra as of late has been the next billion users, 
and those users aren&#39;t 
coming from the web. They are coming for mobile devices, TV watchers and even cars. 
Google
is racing towards a world where all devices are connected, and they want to be there
first. Self driving cars are impressive technology, but they are also rolling data 
collectors that tell Google more about you and the world around you than your phone 
currently does. Android users in emerging economies will never own a PC and will
experience the Internet through devices and apps instead of the web. Chromecast devices
tell Google what media you like to consume. All of this data feeds to Google and 
provides data and context, which tells Google more about us and the world, all in order to 
serve up ads to 
sell you tickets to go see Ant Man.</p>
<p>Google and Apple are very well entrenched in the mobile world. However, they come from 
very different places. Google wants context and information about you, and they store
it in their massively scalable cloud. For you to give this to them, they provide much of 
these services for free. 
Apple wants to create amazing devices and 
experiences for users, charge you a premium for it and have you keep coming back. Nothing illustrates the 
difference in thought between these two companies than their photo strategy. Google
wants everything you can give it, and you can have it for free. Apple gives you a paltry
5 GB for photo storage and then wants you to pay.</p>
<p>However, the next massive area for tech growth is a world 
where everything is connected and Google is winning.
Apple is not ready to play in that world, and I haven&#39;t seen anything to indicate
they are planning to. They do not have their own scalable cloud infrastructure in place, 
though they are working on it, but it is for their services, not for developers to utilize in creating 
applications. Their
development tools are focused on selling hardware devices, not cloud. They are capturing  context
with iBeacons and iPhones, but not to the scale of Google, where it permeates Android.</p>
<p>Google is exceptionally well prepared to be ready for the connected world, it is in their
DNA to do massive scale and be a little bit creepy in what they capture about users. 
They are also creating and or buying companies that feed
data to this connected world. Nest thermostats, self driving cars, Android all feed
data and context to Google.</p>
<p>Who is going to compete with Goolge? One option is  Microsoft. 
They have lost mobile, but they are positioned to execute in a connected
world, with their Azure service for scale, and their Internet of Things strategy. However,
unlike Google, they aren&#39;t building the connected devices like Android, Android Wear,
automobiles that consumers want and will feed data and context. Microsoft is also more of an Enterprise
company these days than a consumer company, though they are working to move the bar.</p>
<p>Or maybe it is Amazon that will be there to fight Google for market share. They have the leading cloud 
service so they can do scale. Their shopping service provides context. However, their disastrous 
Fire launch indicates mobile will not be an option for providing data and context. Their focus on growth
in shopping does not provide the cash that Apple, Google and Microsoft have to buy share.</p>
<p>The web browser is now hitting the Grandparent stage of life, having begat a mobile 
world and we are seeing the start of a connected world. It has been a great ride for the web. Google and Apple
own the mobile world. The
question is who else is going to be battling with Google for the connected world?</p>
]]></content>
        <foo1><![CDATA[https://www.jptacek.com/2015/06/GoogleIOAndDeathOfWeb/]]></foo1>
            </entry>
    
    <entry>
        <title>NEWDUG 2015 CodeCamp - Getting Ready for VS 2015 By Loving the Command Prompt</title>
        <link href="https://www.jptacek.com/2015/03/newdug-codecamp-2015/"/>
        <updated>2015-03-17T05:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2015-03-17,/2015/03/newdug-codecamp-2015/</id>
        <content type="html"><![CDATA[<p>I will be presenting at the 2015 NEWDUG CodeCamp this year. Pretty excited! The CodeCamp is for developers in
NorthEast Wisconsin (or those looking for a roadtrip) and features speakers from all over the Midwest. The CodeCamp is
March 28th and will be at the Fox Valley Technical College. You can find more information, as well as register at
<a href="http://newcodecamp.com/">http://newcodecamp.com/</a>.</p>
<p>My presentation is entitled, Getting Ready for VS 2015 By Loving the Command Prompt. We are going to look at some
of the Open Source tools that will be a big part of Visual Studio 2015. These include things platforms such as
 Bower, Yeoman, NPM,
etc. We may even do some kind of dark magic where we run a Microsoft .NET MVC app natively on a OS X, because that
is now a thing.</p>
<p>If you are in the area, come check out the talk and say hi!</p>
<p><img src="https://www.jptacek.com/2015/03/newdug-codecamp-2015/bower-logo.png" alt="Bower logo"></p>
<p><img src="https://www.jptacek.com/2015/03/newdug-codecamp-2015/chocolately.jpg" alt="Chocolately logo"></p>
<p><img src="https://www.jptacek.com/2015/03/newdug-codecamp-2015/npm.png" alt="npm logo"></p>
<p><img src="https://www.jptacek.com/2015/03/newdug-codecamp-2015/yeoman-logo.png" alt="Yeoman logo"></p>
]]></content>
        <foo1><![CDATA[https://www.jptacek.com/2015/03/newdug-codecamp-2015/]]></foo1>
            </entry>
    
    <entry>
        <title>National Pi Day 2015</title>
        <link href="https://www.jptacek.com/2015/03/National-Pi-Day/"/>
        <updated>2015-03-14T05:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2015-03-14,/2015/03/National-Pi-Day/</id>
        <content type="html"><![CDATA[<p>On March 14th, geeks across North America celebrate <a href="http://en.wikipedia.org/wiki/Pi_Day">Pi Day</a>.
That is when the US version of the date (3/14) is the same
as the world’s most famous number π (pi), 3.14. This year is a very significant Pi Day, since the day of
March 14, 2015 gets us to 4 significant digits of Pi 3.1415!</p>
<p>The last several years we celebrated by calculating π , once with <a href="http://jptacek.com/2014/03/National-Pi-Day-2014/">a
Monte Carlo Simulator</a> and AngularJS and another time comparing
<a href="http://jptacek.com/2013/03/have_your_pi/">C# and C++ performance</a>. We aren not going to break with
tradition this year, so onward to more about π!</p>
<p>Instead of calculating π again, which is fun because math (yeah, MATH!), we thought we would take a different spin and
look at a valuable tool that a lot of people know use without even knowing it,
and that is <a href="http://www.wolframalpha.com/">Wolfram Alpha</a>. The Bing and
DuckDuckGo search engines utilize Alpha for some searches as well as Apple’s Siri.</p>
<p><img src="https://www.jptacek.com/2015/03/National-Pi-Day/alpha1.png" alt="Alpha Home Screen"></p>
<p>Wolfram Alpha has its genesis in a symbolic math program called <a href="http://www.wolfram.com/mathematica/">Mathematica</a>. A
symbolic math program can be thought of
as a math calculator, but calling it a calculator is like calling that $500 supercomputer in your pocket a phone.
Mathematica enables mathematicians, scientists, financial folks and all kinds of people to solve math problems, from
the easy to the difficult. So instead of getting a numerical value for the integral of Sin from 0 to π, it solves the
solutions in closed form and gives you the indefinite integral. A less fancy way of saying this, it does your calculus
homework for you. So</p>
<p><img src="https://www.jptacek.com/2015/03/National-Pi-Day/integral1.png" alt="Integral Input"></p>
<p>becomes</p>
<p><img src="https://www.jptacek.com/2015/03/National-Pi-Day/integral2.png" alt="Integral Output"></p>
<p>This computation engine, became the basis for Wolfram Alpha, so Wolfram Alpha can do great things with math,
for example, here is <a href="http://www.wolframalpha.com/input/?i=%3DIntegrate+%5BSin%5Bx%5D%5D">the integral of Sin</a>.
<img src="https://www.jptacek.com/2015/03/National-Pi-Day/integralAnswer.png" alt="Integral Answer"></p>
<p>So Alpha is great at math, but what differentiates it from its Mathematica toots is the incorporation of curated
knowledge base and the alpha parsing engine. What does this mean? Alpha takes historical data, like stock price
information, Gross Domestic product, historical weather data and many other data sets. It then creates knowledge sets
which are made queryable via human type questions.</p>
<p>You can then do natural language queries across a wide set of data. For example, you can find that
Albert Einstein was 65 in the beginning of 1945 by typing
<a href="http://www.wolframalpha.com/input/?i=how+old+was+albert+einstein+in+1945">“how old was albert Einstein in 1945”</a>.
You can find the
<a href="http://www.wolframalpha.com/input/?i=what+was+the+US+GDP+in+1997">US GDP was 8.788 trillion in 1997</a> or that the
<a href="http://www.wolframalpha.com/input/?i=who+won+the+2005+world+series">Chicago White Sox won the 2005 World Series</a>.</p>
<p>At this point, most of you realize you can get this by a well type Google query. Two things to realize, first the
Wolfram Alpha application shows lots of data about your query, not just the result. It exposes data from its data set.
For example, the World Series query shows the dates the World Series occurred,
locations (Houston and Chicago), participants (Astros and White Sox), etc.
Point 2 though, and this is the most valuable one, these queries can be aggregated. The
US GDP data can be take and plotted by asking Alpha to <a href="http://www.wolframalpha.com/input/?i=plot+the+US+GDP">“plot the US GDP”</a>.</p>
<p><img src="https://www.jptacek.com/2015/03/National-Pi-Day/gdp1.png" alt="US GDP"></p>
<p>It will show folks the <a href="http://www.wolframalpha.com/input/?i=median+home+value+Madison%2C+WI&amp;lk=3">median home value in Madison Wi</a>
or <a href="http://www.wolframalpha.com/input/?i=F4+tornadoes+in+Indiana&amp;lk=3">F4 tornadoes in Indiana</a> or
<a href="http://www.wolframalpha.com/input/?i=MSFT%2C+AAPL%2C+GOOG&amp;lk=3">compare Microsoft, Apple and Google stocks</a> or even
<a href="http://www.wolframalpha.com/input/?i=tell+me+a+joke&amp;lk=3">tell you a joke</a> (FYI, I didn&#39;t say a FUNNY joke).</p>
<p>Wolfram Alpha is a powerful tool for organizations. It can find historical data and make the data available to teams
doing research. It can help make sense of that data too. If you haven’t looked at it, I can encourage people to take
some times at the <a href="http://www.wolframalpha.com/examples/">Alpha examples</a>, they are a great demonstration of what
can be done.</p>
<p>We started out today talking about Pi Day, so let us close the loop. Of course Alpha has a lot to say about Pi!
You can find out more <a href="http://www.wolframalpha.com/input/?i=pi">here</a>.
I was able to calculate Pi to 2000 significant digits by typing
<a href="http://www.wolframalpha.com/input/?i=N%5BPi%2C2000%5D">N[Pi,2000]</a> and get an answer faster than
ANY program I could write.</p>
<tt>

</tt>

<p>This blog post originally appeared
at <a href="http://www.skylinetechnologies.com/Blog/Article/2744/Pi-Day-Looking-at-Wolfram-Alpha.aspx">Skyline Technologies</a></p>
]]></content>
        <foo1><![CDATA[https://www.jptacek.com/2015/03/National-Pi-Day/]]></foo1>
            </entry>
    
    <entry>
        <title>AngularJS - CSS Animations</title>
        <link href="https://www.jptacek.com/2015/03/angularJS-CSS-Animation/"/>
        <updated>2015-03-12T05:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2015-03-12,/2015/03/angularJS-CSS-Animation/</id>
        <content type="html"><![CDATA[<p><a href="http://www.angularjs.org">AngularJS</a> is a Javascript MVC framework from the fine folks over at
<a href="http://www.google.com">Google</a>. The focus of Angular is building complex
 HTML based client applications. Its design philosophy is data first, where your data will be updating the DOM.
 Contrast this to a framework like JQuery where the DOM will update your data.</p>
<p><img src="https://www.jptacek.com/2015/03/angularJS-CSS-Animation/angularLogo.png" alt="AngularJS Logo"></p>
<p>This is the twelfth in a series of posts on AngularJS where we are using Chemistry data from the periodic table
to help us understand the framework. The others posts are</p>
<ol>
<li><a href="http://www.jptacek.com/2013/10/angularjs-introduction/">AngularJS - Introduction</a></li>
<li><a href="http://www.jptacek.com/2013/10/introducing-angularjs-controllers/">AngularJS - Introducing AngularJS Controllers</a></li>
<li><a href="http://www.jptacek.com/2013/10/angularjs-introducing-ng-repeat/">AngularJS - Introducing NG-Repeat</a></li>
<li><a href="http://www.jptacek.com/2014/01/angularjs-further-with-ng-repeat/">AngularJS - More with NG-Repeat</a></li>
<li><a href="http://www.jptacek.com/2014/01/angularjs-lou-reed/">AngularJS - Image Binding</a></li>
<li><a href="http://www.jptacek.com/2014/02/angularJS-templates/">AngularJS - Introducing Templates</a></li>
<li><a href="http://www.jptacek.com/2014/02/angularJS-IntroToRouting/">AngularJS - Introducing Routing</a></li>
<li><a href="http://www.jptacek.com/2014/05/angularJS-Intro-To-Services/">AngularJS - Introduction to Services</a></li>
<li><a href="http://www.jptacek.com/2014/06/angularJS-intro-to-directives/">AngularJS - Introduction to Directives</a></li>
<li><a href="http://jptacek.com/2014/12/angularJS-further-with-directives/">AngularJS - Further with Directives</a></li>
<li><a href="http://jptacek.com/2015/02/angularJS-Best-Practices/">AngularJS - Best Practices</a></li>
<li>AngularJS - CSS Animations</li>
</ol>
<blockquote>
<p>Note: AngularJS does not allow for more than one ng-app directive. When I have multiple angular posts on
the home page of my blog, only one application will work. I need to refactor the entire site to account for
this. All of that to say this, you are best clicking on a single article so you can see the pages in action.</p>
</blockquote>
<p>AngularJS enables animations via the NgAnimate directive. This is an external JavaScript file that you will need for
your application, so you will need to obtain the JavaScript. This can be done via the usual suspects, CDN,
<a href="https://code.angularjs.org/">download</a> or Bower. The Bower install command is <code>bower install angular-animate</code></p>
<p>There are three ways to do animations in AngularJS:</p>
<ul>
<li>CSS Animations</li>
<li>CSS Transitions (or Keyframe Animations)</li>
<li>Javascript</li>
</ul>
<p>We will look at each of these in separate posts, but will get started with CSS Animations.</p>
<p>It is important to realize that the animations we are talking about in AngularJS here are not going to allow you to
create a Pixar movie. The animations can be thought of as a bit of visual flair to your application to let users know
their input has been recognized.</p>
<p>In this post, we are going to focus on three AngularJS events that we can use with CSS animations. It is important to
realize that Angular does not do any of the animations, but provides hooks for us to use our own animations, be they
via CSS or JavaScript.</p>
<p>There are five AngularJS events</p>
<ul>
<li>enter - DOM element is add to the DOM tree</li>
<li>leave - DOM element is removed from the DOM tree</li>
<li>move - DOM element is moved within the DOM tree</li>
<li>addClass - A class is added to an element</li>
<li>removeClass - A class is removed from an element</li>
</ul>
<p>So we have events get fired, the next thing that happens is the the animate library will add and remove CSS classes
  based on the fired events. This is based on conventions for the naming of our CSS classes, which are
 <code>[class]-[event]-[state]</code>. So, for the enter event, we have a <code>.ng-enter</code>
 class and a <code>.ng-enter-active</code> class.</p>
<p>The above is a little confusing, so let&#39;s try to state it another way. The AngularJS animate library supports animations
for enter, leave and move. If we create a list in Angular and then have a filter applied, ngAnimate then toggles the
CSS classes for us based on the state. Within these classes we then define our CSS for animation. In this scenario,
ngAnimate works on ngRepeat, ngInclude, ngIf, ngSwitch, ngShow, ngHide, ngView, and ngClass.</p>
<p>What does this look like? Well first, we need to inject the animation framework into our application. After installation
and including the js library in your application
(<code>&lt;script type=&quot;text/javascript&quot; src=&quot;angular-animate.min.js&quot;&gt;&lt;/script&gt;</code>) you need to inject into your app module.</p>
<pre class="highlight"><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
<span class="hljs-pi">    'use strict'</span>;

    angular
        .module(<span class="hljs-string">'chemistryApp'</span>, [
            <span class="hljs-string">'ngAnimate'</span>
        ]);
})();
</code></pre>
<p>What we will do for our example is apply some animations to a periodic element when the user clicks on it. We will do
this by applying a transition between the two states by changing the opacity.</p>
<p>Here is a quick look at the CSS.</p>
<pre class="highlight"><code class="hljs css"><span class="hljs-class">.periodicCell-animation</span><span class="hljs-class">.ng-enter</span>, <span class="hljs-class">.periodicCell-animation</span><span class="hljs-class">.ng-leave</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">-webkit-transition</span>:<span class="hljs-value"> <span class="hljs-number">0.5s</span> linear all</span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">-moz-transition</span>:<span class="hljs-value"> <span class="hljs-number">0.5s</span> linear all</span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">-o-transition</span>:<span class="hljs-value"> <span class="hljs-number">0.5s</span> linear all</span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">transition</span>:<span class="hljs-value"> <span class="hljs-number">0.5s</span> linear all</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.periodicCell-animation</span><span class="hljs-class">.ng-enter</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">opacity</span>:<span class="hljs-value"> <span class="hljs-number">0</span></span></span>;
<span class="hljs-rule">}</span></span>


<span class="hljs-class">.periodicCell-animation</span><span class="hljs-class">.ng-enter-active</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">opacity</span>:<span class="hljs-value"> <span class="hljs-number">0</span></span></span>;
<span class="hljs-rule">}</span></span>


<span class="hljs-class">.periodicCell-animation</span><span class="hljs-class">.ng-leave</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">opacity</span>:<span class="hljs-value"> <span class="hljs-number">1</span></span></span>;
<span class="hljs-rule">}</span></span>


<span class="hljs-class">.periodicCell-animation</span><span class="hljs-class">.ng-leave</span><span class="hljs-class">.ng-leave-active</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">opacity</span>:<span class="hljs-value"> <span class="hljs-number">0</span></span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<p>Next, we update our HTML template to include a new angular keyword, <code>ng-if</code>, which, based on an expression will add
or remove a DOM element. This then will trigger a ngAnimate events for enter and leave which will apply our CSS
items we created earlier.</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">'periodicCell {{element.cssForDisplay}} periodicCell-animation'</span> <span class="hljs-attribute">data-ng-if</span>=<span class="hljs-value">"!fullElement"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"atomicNumber"</span>&gt;</span>{{element.atomicNumber}}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"atomicWeight"</span>&gt;</span>{{element.atomicWeight}}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"atomicSymbol"</span>&gt;</span>{{element.symbol}}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"centerElementDisplay"</span>&gt;</span>{{element.name }}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
</code></pre>
<p>Let&#39;s see it in action now.</p>
<div id="app" ng-app="chemistryApp">
    <div class="container" ng-controller="chemistryController">

      <div class="row">
          <select ng-model="periodicElement" ng-options="e.name for e in elements"></select><br>
      </div>
      <div class="row">
          &nbsp;
      </div>
      <div class="row">
          &nbsp;
      </div>
      <div class="row">
          <div class="col-md-2">
              <periodic-chart-element element="periodicElement"></periodic-chart-element>
          </div>
          <div class="col-md-2">
              &nbsp;
          </div>
          <div class="col-md-2">
              <periodic-chart-element element="elements[periodicElement.atomicNumber]"></periodic-chart-element>
          </div>
          <div class="col-md-2">
              &nbsp;
          </div>
          <div class="col-md-2">
              <periodic-chart-element element="elements[periodicElement.atomicNumber+1]"></periodic-chart-element>
          </div>
      </div>
    </div>
</div>

<p><br>
As you can see, the ngAnimate library can quickly be incorporated in your existing Angular application. It enables
CSS items to be applied to changes in the DOM and apply CSS based on naming rules. In our next Angular blog post,
we will
look at CSS transitions.</p>
<p>I have created an Azure Website to host all of this code at <a href="http://angularperiodic.azurewebsites.net/">http://angularperiodic.azurewebsites.net/</a></p>
<p>The code is also available on <a href="https://github.com/jptacek/AngularPeriodic">GitHub</a></p>
<link href="/2015/03/angularJS-CSS-Animation/css/animate.css" rel="stylesheet">]]></content>
        <foo1><![CDATA[https://www.jptacek.com/2015/03/angularJS-CSS-Animation/]]></foo1>
            </entry>
    
    <entry>
        <title>Introduction to Windows 10</title>
        <link href="https://www.jptacek.com/2015/02/Windows10-Preview/"/>
        <updated>2015-02-25T06:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2015-02-25,/2015/02/Windows10-Preview/</id>
        <content type="html"><![CDATA[<p>Microsoft is currently working on the next major release of Windows, called Windows 10. Currently, Windows 10 is in technical preview mode, with millions of people testing it across the world
via their <a href="https://insider.windows.com/">Windows Insider Program</a>. I have been part of the Insider Program for a while now and have been through several releases and thought I would share some initial
impressions of Windows 10.</p>
<p>##Start Menu##
For most users, one of the biggest changes is the Start Menu is back. In Windows 8, the Start Menu was replaced by the Start Screen. Many users found this disconcerting as you moved back and forth between full screen “Windows Modern” and the traditional desktop mode. Microsoft is addressing this heads on by bringing back the start menu. It is also making the start menu more “modern”, by including Microsoft’s innovative Live Tiles in the start menu.</p>
<p><img src="https://www.jptacek.com/2015/02/Windows10-Preview/startScreen.png" alt="Windows 10 Start Screen"></p>
<p>##Cortana##
Microsoft’s Cortana has been a big hit on Windows Phone. It is a voice driven assistant, similar to Google Now or Apple’s Siri. You can click the search icon and “talk” to Cortana and have it perform searches for you. You can even change some settings and say “Hey Cortana” and have it do searches for you.</p>
<p>Cortana also bills itself as a personal digital assistant. It is able to parse through emails and documents and “learn” about you. So if you have a flight on Delta and you say Hey Cortana, Delta, it will show information about you flight.</p>
<p>It also knows I like the Chicago Bulls, so it keeps information front and center. It is also nice enough not to mention that Derick Rose is out for the rest of the season, again.</p>
<p><img src="https://www.jptacek.com/2015/02/Windows10-Preview/cortana1.png" alt="Cortana"></p>
<p>Again, all of this code is pre-release and may change, but so far Cortana looks like a great feature for Windows 10.</p>
<p>##Continuum##
One of the biggest issues many people had with Windows 8 was how the tablet/modern mode was so prevalent and jarring in desktop mode. Microsoft is again addressing, heads on, one of the major Win 8 complaints, by including a new feature called Continuum. Continuum is there to make dual use machines like a Microsoft Surface function even better.</p>
<p>Users can decide to go to Tablet Mode, either via the Notification Bar and selecting Tablet Mode or by disconnecting/connecting a keyboard and responding to the prompt. This will then put have your apps run full screen making them more touch friendly and applicable to running on a tablet.</p>
<p><img src="https://www.jptacek.com/2015/02/Windows10-Preview/continuum.png" alt="Continuum"></p>
<p><img src="https://www.jptacek.com/2015/02/Windows10-Preview/continuum2.png" alt="Continuum"></p>
<p>When you are running in desktop mode, applications are then windowed, including “Modern” apps. Previously, “Modern” apps would run in full screen mode for all users. This is a pretty significant change from Microsoft and highlights how they are enabling users to be productive if they are in tablet mode or desktop mode.
<img src="https://www.jptacek.com/2015/02/Windows10-Preview/continuum3.png" alt="Continuum"></p>
<p>##Universal Apps##
One of the biggest changes under the hood of Windows promises to be Universal Apps. This is a single platform that enables to developers to develop an application for Windows, Windows Phone and the Xbox One. Microsoft is hoping this will reignite developer interest as the multi platform development opens up many new opportunities.</p>
<p>##All Roads Lead to Build##
Microsoft’s Build Conference at the end of April 2015 promises to have A LOT more information on the new version of Windows, especially for developers. We will all know more soon after that. Windows 10 is supposed to be available in the second half of 2015.</p>
<p>This blog post originally appeared at <a href="http://www.skylinetechnologies.com/Blog/Article/2737/Introduction-to-Windows-10.aspx">Skyline Technologies</a>,</p>
]]></content>
        <foo1><![CDATA[https://www.jptacek.com/2015/02/Windows10-Preview/]]></foo1>
            </entry>
    
    <entry>
        <title>AngularJS - Best Practices</title>
        <link href="https://www.jptacek.com/2015/02/angularJS-Best-Practices/"/>
        <updated>2015-02-18T06:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2015-02-18,/2015/02/angularJS-Best-Practices/</id>
        <content type="html"><![CDATA[<p><a href="http://www.angularjs.org">AngularJS</a> is a Javascript MVC framework from the fine folks over at
<a href="http://www.google.com">Google</a>. The focus of Angular is building complex
 HTML based client applications. Its design philosophy is data first, where your data will be updating the DOM.
 Contrast this to a framework like JQuery where the DOM will update your data.</p>
<p><img src="https://www.jptacek.com/2015/02/angularJS-Best-Practices/angularLogo.png" alt="AngularJS Logo"></p>
<p>This is the eleventh in a series of posts on AngularJS where we are using Chemistry data from the periodic table
to help us understand the framework. The others posts are</p>
<ol>
<li><a href="http://www.jptacek.com/2013/10/angularjs-introduction/">AngularJS - Introduction</a></li>
<li><a href="http://www.jptacek.com/2013/10/introducing-angularjs-controllers/">AngularJS - Introducing AngularJS Controllers</a></li>
<li><a href="http://www.jptacek.com/2013/10/angularjs-introducing-ng-repeat/">AngularJS - Introducing NG-Repeat</a></li>
<li><a href="http://www.jptacek.com/2014/01/angularjs-further-with-ng-repeat/">AngularJS - More with NG-Repeat</a></li>
<li><a href="http://www.jptacek.com/2014/01/angularjs-lou-reed/">AngularJS - Image Binding</a></li>
<li><a href="http://www.jptacek.com/2014/02/angularJS-templates/">AngularJS - Introducing Templates</a></li>
<li><a href="http://www.jptacek.com/2014/02/angularJS-IntroToRouting/">AngularJS - Introducing Routing</a></li>
<li><a href="http://www.jptacek.com/2014/05/angularJS-Intro-To-Services/">AngularJS - Introduction to Services</a></li>
<li><a href="http://www.jptacek.com/2014/06/angularJS-intro-to-directives/">AngularJS - Introduction to Directives</a></li>
<li><a href="http://jptacek.com/2014/12/angularJS-further-with-directives/">AngularJS - Further with Directives</a></li>
<li>AngularJS - Best Practices</li>
<li><a href="http://jptacek.com/2015/03/angularJS-CSS-Animation/">AngularJS - CSS Animations</a></li>
</ol>
<blockquote>
<p>Note: AngularJS does not allow for more than one ng-app directive. When I have multiple angular posts on
the home page of my blog, only one application will work. I need to refactor the entire site to account for
this. All of that to say this, you are best clicking on a single article so you can see the pages in action.</p>
</blockquote>
<p>This blog series on AngularJS has been going on for a while, since October 2013 to be exact. In that time, AngularJS
has changed and best practices have emerged. I thought it would be worth taking a look at the current state of best
practices and refactoring some of the code we have been working on to reflect that.</p>
<p>To start off, there are people a lot smarter than me thinking about this stuff. Some of these folks work at Google and
they have published a style guide you can find at the
<a href="http://google-styleguide.googlecode.com/svn/trunk/angularjs-google-style.html">Google Code site</a>.
The Google Style Guide is a good start, but it it not as complete as some I have run across. It also is heavily focused
on <a href="https://developers.google.com/closure/">Closure</a>, a Google toolset that not everybody is invested in.</p>
<p>A second great resource is <a href="http://toddmotto.com/">Todd Motto&#39;s</a> AngularJS Style Guide. Todd has a
<a href="http://toddmotto.com/opinionated-angular-js-styleguide-for-teams/">blog post</a> where he introduces his reasoning for some
of his choices. Cooler yet, he has a <a href="https://github.com/toddmotto/angularjs-styleguide">GitHub repository</a>
 that he keeps up to date with his latest set of changes and reasoning behind them.</p>
<p>A third resource is from <a href="http://www.johnpapa.net/">John Papa</a>, one time Microsoft evangelist and Google Developer
Expert. Like Todd, John has a GitHub repo with his <a href="https://github.com/johnpapa/angularjs-styleguide">Style Guide</a>.</p>
<p>The great thing about what both Todd and John have done by putting their Style Guides on GitHub is that it makes it
easy to make one of them YOUR Style Guide. Clone the repo and publish within your organization. It is a great way to get
started and introduce consistency within your organization.</p>
<p>I have decided to gnerally follow the style guide setup by John Papa. I find his
<a href="http://www.pluralsight.com/author/john-papa">Pluralsight courses</a> to be
great resources for developers and you have to start some place.</p>
<p>###IIFE###
The first thing we are going to do to our code is to rework how our code to implement IIFEs. IIFEs stand for Immediately-Invoked
Function Expressions, pronounced &#39;iify&#39;. This is a standard JavaScript best practice to isolate scope of functions.
JavaScript has a single execution scope, as you  load more and more libraries and variables, you run into the &quot;opportunity&quot;
for name collisions. This makes for a very painful day of code debugging.</p>
<p>IIFEs then are a common pattern to use to avoid polluting the namespace. It works to keep all of the variables
localized to the scope of the function being executed. We also end up being able to optimize minification, since our
variables are localized.</p>
<p>The general syntax of an IIFE is</p>
<pre class="highlight"><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
   <span class="hljs-comment">/* code */</span>
})();
</code></pre>
<p>The function executes immediately, thanks to the parens at the end of the function call.</p>
<p>We have been bad programmers in our code examples, so we will clean this up and be better moving forward. This
ends with us reworking our JavaScript code. Here is a before/after example for our app.js file.</p>
<p>Before:</p>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> chemistryApp = angular.module(<span class="hljs-string">'chemistryApp'</span>, []);
</code></pre>
<p>After:</p>
<pre class="highlight"><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
<span class="hljs-pi">    'use strict'</span>;

 <span class="hljs-keyword">var</span> chemistryApp = angular.module(<span class="hljs-string">'chemistryApp'</span>, []);
})();
</code></pre>
<p>Ben Alman is credited with nameing IIFEs in this <a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/">blog post</a>
if you want more information</p>
<p>###Getter/Setter###
The next step we want to take to improve our code is how we are creating and referencing our module. Initially we were
using code based on AngularJS.com samples, where we declare a module as a variable, for example:</p>
<pre class="highlight"><code class="hljs javascript"> <span class="hljs-keyword">var</span> chemistryApp = angular.module(<span class="hljs-string">'chemistryApp'</span>, []);
</code></pre>
<p>The recommendation, straight from the <a href="https://docs.angularjs.org/guide/module">Angular site</a> is to use the getter
syntax at all times. The syntax above, will create the module each time, overwriting the existing one.</p>
<p>Getter syntax for the module enables us to retrieve an existing module. We rework our <code>app.js</code> to now incorporate
both IIFE and setter syntax to become</p>
<pre class="highlight"><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
<span class="hljs-pi">    'use strict'</span>;

    angular
    .module(<span class="hljs-string">'chemistryApp'</span>,[]);
})();
</code></pre>
<p>###Named Functions###
Next, we are going to rework our code to utilize named functions, mostly for code readability as it reduces the amount
of callback functions in our code.</p>
<p>For our Controller definition we could define our function with a callback as</p>
<pre class="highlight"><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
<span class="hljs-pi">    'use strict'</span>;

    angular
        .module(<span class="hljs-string">'chemistryApp'</span>)
        .controller(<span class="hljs-string">'chemistryController'</span>, [<span class="hljs-string">'$scope'</span>, <span class="hljs-string">'chemistryService'</span>, <span class="hljs-string">'$log'</span>,
            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">chemistryController</span><span class="hljs-params">($scope, chemistryService, $log)</span> </span>{


        <span class="hljs-comment">// some code</span>
      }]
    )
})();
</code></pre>
<p>However, the nesting can make long term code maintenance and readability more cumbersome. A better approach is</p>
<pre class="highlight"><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
<span class="hljs-pi">    'use strict'</span>;

    angular
        .module(<span class="hljs-string">'chemistryApp'</span>)
        .controller(<span class="hljs-string">'chemistryController'</span>,chemistryController);

      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">chemistryController</span><span class="hljs-params">($scope,  chemistryService,$log)</span> </span>{

        <span class="hljs-comment">// some code</span>


    }

})();
</code></pre>
<p>###Dependency Injection###
AngularJS has a great Dependency Injection (DI) framework. The way we have the code working above can cause some issues
with things like bundling and minification. When minification tools rename our DI functions, they may not be found
by Angular. As a result, you should explicitly identify DI functions to avoid this.</p>
<p>One way to do is to rework function calls such as</p>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
<span class="hljs-pi">    'use strict'</span>;

    angular
        .module(<span class="hljs-string">'chemistryApp'</span>)
        .controller(<span class="hljs-string">'chemistryController'</span>,chemistryController);

      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">chemistryController</span><span class="hljs-params">($scope,  chemistryService,$log)</span> </span>{

        <span class="hljs-comment">// some code</span>


    }

})();
</code></pre>
<p>to identify what is being injected. You need to be sure to map up parameters properly, or all kinds of madness will
ensue</p>
<pre class="highlight"><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
<span class="hljs-pi">     'use strict'</span>;

     angular
         .module(<span class="hljs-string">'chemistryApp'</span>)
         .controller(<span class="hljs-string">'chemistryController'</span>,
         [<span class="hljs-string">'$scope'</span>, <span class="hljs-string">'chemistryService'</span>,<span class="hljs-string">'$log'</span>,chemistryController]);

       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">chemistryController</span><span class="hljs-params">($scope,  chemistryService,$log)</span> </span>{

         <span class="hljs-comment">// some code</span>


     }

 })();
</code></pre>
<p>Another, better and recommended approach, is to use the <code>$inject</code> function to explicitly identify what is being
injected.</p>
<pre class="highlight"><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
<span class="hljs-pi">    'use strict'</span>;

    angular
        .module(<span class="hljs-string">'chemistryApp'</span>)
        .controller(<span class="hljs-string">'chemistryController'</span>,chemistryController);

    chemistryController.$inject =  [<span class="hljs-string">'$scope'</span>, <span class="hljs-string">'chemistryService'</span>,<span class="hljs-string">'$log'</span>];

    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">chemistryController</span><span class="hljs-params">($scope,  chemistryService,$log)</span> </span>{

         <span class="hljs-comment">// some code</span>


    }

})();
</code></pre>
<p>The reasons for this approach are the same as above, bypassing minfication issues. This approach though is more
explicit and makes the code more readable.</p>
<p>###Explicit function declarations###
Another good practice is to explicitly identify function definitions. If we look at our original service function
the structure was</p>
<pre class="highlight"><code class="hljs javascript">chemistryApp.service(<span class="hljs-string">'chemistryService'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{

    <span class="hljs-keyword">var</span> getCssClassElement = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">( elementType)</span> </span>{
        <span class="hljs-comment">// code</span>
    };

    <span class="hljs-keyword">var</span> getElements = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{

        <span class="hljs-comment">// code</span>

        <span class="hljs-keyword">return</span> periodicData.elements;


    };

    <span class="hljs-keyword">return</span> {
        getCssClassElement : getCssClassElement,
        getElements: getElements
    };
});
</code></pre>
<p>which is kind of what we want. One of the places where Papa and Motto differ on their approaches though is WHERE
the function declarations should happen. Papa prefers that start of the service and Motto towards the bottom. I lean
towards the Papa approach because I can explicitly see my &quot;public interfaces&quot; for the function. This is ultimately
what we want to be testable in our code. However, the downside is some scrolling to get to the implementation details.
Ultimately, make a choice and be consistent.</p>
<pre class="highlight"><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
<span class="hljs-pi">    'use strict'</span>;

    angular
        .module(<span class="hljs-string">'chemistryApp'</span>)
        .service(<span class="hljs-string">'chemistryService'</span>,chemistryService);

    <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">chemistryService</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> {
            getCssClassElement: getCssClassElement,
            getElements: getElements
        };

        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCssClassElement</span><span class="hljs-params">(elementType)</span> </span>{
            <span class="hljs-comment">// some code</span>
        };

        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getElements</span><span class="hljs-params">()</span> </span>{

            <span class="hljs-comment">// some code</span>

        };
    }
})();
</code></pre>
<p>###Directory Structure###
Next up is best practices for directory structure. Ultimately, we are not going to refactor this code to reflect this best
practice. However, in the real world, where I do this for a living, I definitely follow the practice outlined below.
What we have here is too small.</p>
<p>Initially, when you start creating an Angular app, most people start by organizing my folders by the type of code they are writing.
This results in a folder for controllers, one for services, directives, etc. This can work at the beginning, but by the
the time you are working on a large app, it becomes difficult. Having 15 controller functions in a directory, then
searching for the corresponding service functions in another directory is NOT efficient.</p>
<p>Instead, the recommendation is to organize folders by function. For example, if you have a sports application you
would have a baseball folder with controller, service and directive files in that directory applicable to baseball.
All the functionality is
concisely gathered in a single folder location. Much easier.</p>
<p>###Wrapping Up###
I have reworked the code for the app we have been talking about to reflect the best practices outlined above. The
functionality is the same as last time, but ultimately, a bit more maintainable long term and less likely to run
into issues with minification and bundling. The app doesn&#39;t look a whole lot different though, which is a good thing.</p>
<p>Ultimately, the goals of what we are doing is to make the code more explicit, more readable and ultimately more
maintainable. Both Papa and Motto have great approaches and styles. Pick what works for you and be cosistent within
your projects and teams.</p>
<div id="app" ng-app="chemistryApp">
    <div class="container" ng-controller="chemistryController">

      <div class="row">
          <select ng-model="periodicElement" ng-options="e.name for e in elements"></select><br>
      </div>
      <div class="row">
          &nbsp;
      </div>
      <div class="row">
          &nbsp;
      </div>
      <div class="row">
          <div class="col-md-2">
              <periodic-chart-element element="periodicElement"></periodic-chart-element>
          </div>
          <div class="col-md-2">
              &nbsp;
          </div>
          <div class="col-md-2">
              <periodic-chart-element element="elements[periodicElement.atomicNumber]"></periodic-chart-element>
          </div>
          <div class="col-md-2">
              &nbsp;
          </div>
          <div class="col-md-2">
              <periodic-chart-element element="elements[periodicElement.atomicNumber+1]"></periodic-chart-element>
          </div>
      </div>
    </div>
</div>


<p>I have created an Azure Website to host all of this code at <a href="http://angularperiodic.azurewebsites.net/">http://angularperiodic.azurewebsites.net/</a></p>
<p>The code is also available on <a href="https://github.com/jptacek/AngularPeriodic">GitHub</a>
</p>
<link href="/2015/02/angularJS-Best-Practices/css/animate.css" rel="stylesheet">]]></content>
        <foo1><![CDATA[https://www.jptacek.com/2015/02/angularJS-Best-Practices/]]></foo1>
            </entry>
    
    <entry>
        <title>Hosting a DocPad Site on GitHub Pages</title>
        <link href="https://www.jptacek.com/2015/01/moving-docpad-to-github-pages/"/>
        <updated>2015-01-16T06:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2015-01-16,/2015/01/moving-docpad-to-github-pages/</id>
        <content type="html"><![CDATA[<p>I am a fan, a HUGE fan, of Microsoft&#39;s <a href="http://azure.microsoft.com/">Azure</a> platform, especially their Azure Websites.
This blog, <a href="https://www.jptacek.com/2015/01/moving-docpad-to-github-pages/jptacek.com">jptacek.com</a> has been hosted
on Azure for several iterations. First as a blog on WordPress, and later, as a blog being generated using
<a href="https://docpad.org/">DocPad</a>. Feel
free to follow my <a href="http://jptacek.com/tags/wordpress/">Wordpress</a> and <a href="http://jptacek.com/tags/docpad/">DocPad</a>
adventures. Further, when I speak at events, I often say the subtitle of my talk should be
&quot;Azure, a love story&quot;. It is awesome and it
is a great tool for developers.</p>
<p>The only thing that causes me a slight measure of discomfort is that it costs actual money to host my blog on Azure.
I am fine paying money, especially
for things I think are awesome, like Azure. However, my site, after migrating to DocPad is pretty stupid, it is just
static HTML. Having a server for that can be a bit of overkill.</p>
<p>Enter <a href="http://www.github.com">GitHub</a>.</p>
<p><img src="https://www.jptacek.com/2015/01/moving-docpad-to-github-pages/githubpages.jpg" alt="GitHub pages"></p>
<p>They have a platform for serving up static HTML. I think the thing that first
time I had a seed planted was a <a href="http://haacked.com/archive/2013/12/02/dr-jekyll-and-mr-haack/">blog post</a>
that <a href="https://twitter.com/Haacked">Phil Haack</a> did about moving his personal blog
to GitHub Pages. In it, he steals a
tweet from <a href="https://twitter.com/holman">Zach Holman</a>, one of his GitHub colleagues.</p>
<blockquote>
<p>@haacked the ops team gets paged when <a href="http://zachholman.com">http://zachholman.com</a> is down. You still have a lot to learn, buddy</p>
</blockquote>
<p>I thought that was a pretty good line. I also realize it is the same thing Microsoft does on their cloud platform, but
it DID inspire me to dig a bit more into GitHub pages. At the time I looked, it was pretty focused on Jekyll, which
I shied away from it based on its Ruby background (more info about my decision
<a href="http://jptacek.com/2013/12/saying-hello-to-docpad/">here</a> ). A year later though, I have gotten a bit more
comfortable with DocPad, and have a workflow to get my pages published to GitHub Pages.</p>
<p>What are GitHub Pages? They are public webpages that are hosted on GitHub&#39;s infrastructure. They do NOT support
HTTPS, so you won&#39;t want to host eCommerce sites on it. However, for blogs and other public content they work great.
You can use Jekyll, which is a Ruby based static site generator. It is similar to DocPad. One benefit of using Jekyll
with GitHub pages though is that you can check in your posts into your GitHub repository and it will automatically
generate the site for you.</p>
<p>There are two types of GitHub pages, User/Organization and Project sites. This blog, <a href="http://jptacek.com">JPtacek.com</a>
is a User site. For User/Organization pages, GitHub will take content committed to the repository <em>username</em>.github.io,
where <em>username</em> is a user&#39;s GitHub account. For me, this essentially means I check in my content to a the GitHub repository
<a href="https://www.jptacek.com/2015/01/moving-docpad-to-github-pages/jptacek.github.io">https://github.com/jptacek/jptacek.github.io</a>. HTML content checked into this repository is then
automatically deployed to a static site at the URL <a href="https://www.jptacek.com/2015/01/moving-docpad-to-github-pages/jptacek.github.io">https://jptacek.github.io</a>. You can find out
more about this at GitHubs site <a href="https://pages.github.com/">https://pages.github.com/</a>.</p>
<p>It is worth noting that GitHub Pages User/Organization pages get checked into the master branch of the repository.
GitHub project sites, which are for, wait for it....., projects, are a bit different. One of those differences is that
they have content checked into the GHPages branch of the project.</p>
<p>So far, so good. However, the site has been living at a specific domain for a while, which I would really like to
continue to use. Of course, GitHub pages also supports custom domain names for a site. Instructions are
<a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/">available</a> online. Essentially though,
it is pretty slick and quick to do. You check in a single file called CNAME (all caps) into your <em>username</em>.github.io
repository. This file should be in the root of your repository and have the URL of the site, in my case, www.jptacek.com,
without any http:// in front. After committing your changes you can click settings in your repository</p>
<p><img src="https://www.jptacek.com/2015/01/moving-docpad-to-github-pages/settings1.png" alt="Click settings"></p>
<p>and you can then verify the URL is set</p>
<p><img src="https://www.jptacek.com/2015/01/moving-docpad-to-github-pages/settings2.png" alt="Verify"></p>
<p>We have GitHub all set to serve up our requests, but now we need to actually do some work with DNS to do that. I use
<a href="https://dnsimple.com/">DNSimmple</a> to manage my DNS. Part of the neat things about DNSimple is they keep it simple :).
There is a template setup for you to enable GitHub pages already present. It will add an Alias record for you and
you are on your way</p>
<p><img src="https://www.jptacek.com/2015/01/moving-docpad-to-github-pages/dnSimple.png" alt="DNSimple"></p>
<p>So we have a site ready to go and it is live on the Internet, but we need content! Previously, through the magic of
Azure, I would check in my blog content as a markdown file, Azure would read the check ins from my GitHub repository,
download appropriate NPM pacakges, compile my markdown to static HTML and publish a site. All pretty cool. That is gone
now. So instead of having the cloud compile my markdown, I am now doing it all local. This is the main negative for me
about moving to GitHub pages, but sometimes freedom has a cost :).</p>
<p>Since I will be dealing with two GitHub repositories, I reworked my workflow a bit. My site, and all of it&#39;s content
and DocPad assets lives in GitHub at <a href="https://github.com/jptacek/JPtacek.com">https://github.com/jptacek/JPtacek.com</a>
and my static blog content, needs to be in
<a href="https://github.com/jptacek/jptacek.github.io">https://github.com/jptacek/jptacek.github.io</a> to get published to
GitHub Pages. What I have done is reworked a couple of things with DocPad to support this. Previously, I had
my repository checked out locally to a directory called JPtacek.com. What I have done is keep this as the root
directory and created two subdirectories within there. The first directory, BlogSource, is the DocPad repository which
will be responsible for generating my static content from markdown files. I cloned my GitHub
<a href="https://www.jptacek.com/2015/01/moving-docpad-to-github-pages/JPtacek.com">https://github.com/jptacek/JPtacek.com</a> repository here. The second directory, ghpages, is where
I cloned the <a href="https://www.jptacek.com/2015/01/moving-docpad-to-github-pages/jptacek.github.io">https://github.com/jptacek/jptacek.github.io</a> repository.</p>
<p><img src="https://www.jptacek.com/2015/01/moving-docpad-to-github-pages/directory.png" alt="Direcotry"></p>
<p>The next step is to be able to generate the content locally so I can push my static content from my local drive
to the <a href="https://www.jptacek.com/2015/01/moving-docpad-to-github-pages/jptacek.github.io">https://github.com/jptacek/jptacek.github.io</a> repository. This was done by updating my
DocPad environment a bit. In the DocPad configuration file, <code>docpad.coffee</code>, I created two environments, one
for local development, the default way I had been using DocPad previously before, and a second for static. The
static environment is what I use when I want to publish a new blog post. The main thing to note is the configuration setting for
<code>outPath</code>, which points up a directory level from where my DocPad environment is (the <code>BlogSource</code>) directory and
publishes files to the github.io directory(<code>ghpages</code>).</p>
<p>I can run this command by typing <code>docpad -e static generate</code>. After running DocPad and generating the static
content I am a commit and a push away from an updated website!</p>
<pre class="highlight"><code class="hljs javascript">#docpad -e static generate
  environments:
    static:
      outPath: <span class="hljs-string">'../ghpages'</span>
      collections:   posts: -&gt;
        @getCollection(<span class="hljs-string">"html"</span>).findAllLive({layout: <span class="hljs-string">'post'</span>},[{date:-<span class="hljs-number">1</span>}])
    development:
      outPath: <span class="hljs-string">'.out'</span>
      collections:
        posts: -&gt;
          @getCollection(<span class="hljs-string">'documents'</span>).findAllLive({layout: {<span class="hljs-string">'$in'</span> : [<span class="hljs-string">'post'</span>, <span class="hljs-string">'drafts'</span>]}}, [layout: <span class="hljs-number">1</span>,  date: -<span class="hljs-number">1</span>])
</code></pre>
<p>So in closing, my site is no longer hosted on Azure, but GitHub pages and it wasn&#39;t too painful. I am now saving $10-15
a month. This will translate to more coffee.</p>
<p>A high level overview about the pros and cons.</p>
<p>Pros about GitHub Pages</p>
<ul>
<li>Free! Azure was costing from $10-$15/month</li>
<li>Bypass some CPU usage limits on Azure</li>
</ul>
<p>Cons about GitHub Pages</p>
<ul>
<li>Cannot automatically build sites from Git commits</li>
<li>No IPV6 support (issue with Azure Websites currently)</li>
<li>No SSL support</li>
</ul>
]]></content>
        <foo1><![CDATA[https://www.jptacek.com/2015/01/moving-docpad-to-github-pages/]]></foo1>
            </entry>
    
    <entry>
        <title>MS Dev Podcast Show - December 19, 2014</title>
        <link href="https://www.jptacek.com/2014/12/msDevShowDec2014/"/>
        <updated>2014-12-23T06:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2014-12-23,/2014/12/msDevShowDec2014/</id>
        <content type="html"><![CDATA[<p>I had the very cool experience of being invited to be part of the <a href="http://msdevshow.com/">MS Dev Show</a>, a Podcast focused on Microsoft Developer
Technologies hosted by <a href="https://twitter.com/carlschweitzer">Carl Schweitzer</a> and
<a href="https://twitter.com/ytechie">Jason Young</a>. I enjoy the show when I get to a chance listen and, truth be told, Jason
was one of the inspirations for me switching my blogging engine to Docpad. That means I was pretty excited to be
invited on!</p>
<p>The Podcast mostly focused on AngularJS, but we talked a bit about some of the upcoming Visual Studio changes and
ASP.NET vNext, which is going to be really cool for Microsoft Developers. You can get a hint of what is coming on one of my
recent blog posts
<a href="https://www.jptacek.com/2014/12/creating-ASP.NET-vNext-application-on-OSX/">Running ASP.NET vNext on OS X</a>.</p>
<p>You can listen to the show at
<a href="http://msdevshow.com/2014/12/angularjs-with-john-ptacek/">http://msdevshow.com/2014/12/angularjs-with-john-ptacek/</a>.
Wished I would have sounded a bit more eloquent for everyone, but kind of sleep deprived.</p>
<p>Thanks Carl and Jason!</p>
<p> <img src="https://www.jptacek.com/2014/12/msDevShowDec2014/msDevShowlogo@2x.png" alt="MS Dev Show Log Logo"></p>
]]></content>
        <foo1><![CDATA[https://www.jptacek.com/2014/12/msDevShowDec2014/]]></foo1>
            </entry>
    
</feed>